// Code generated by go-swagger; DO NOT EDIT.

package operators

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewV2GetBundleParams creates a new V2GetBundleParams object
//
// There are no default values defined in the spec.
func NewV2GetBundleParams() V2GetBundleParams {

	return V2GetBundleParams{}
}

// V2GetBundleParams contains all the bound params for the v2 get bundle operation
// typically these are obtained from a http.Request
//
// swagger:parameters V2GetBundle
type V2GetBundleParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Array of feature IDs that affect bundle composition (e.g., ["SNO"] for Single Node OpenShift).
	  In: query
	  Collection Format: multi
	*/
	FeatureIds []string
	/*Identifier of the bundle, for example, `virtualization` or `openshift-ai`.
	  Required: true
	  In: path
	*/
	ID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewV2GetBundleParams() beforehand.
func (o *V2GetBundleParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qFeatureIds, qhkFeatureIds, _ := qs.GetOK("feature_ids")
	if err := o.bindFeatureIds(qFeatureIds, qhkFeatureIds, route.Formats); err != nil {
		res = append(res, err)
	}

	rID, rhkID, _ := route.Params.GetOK("id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindFeatureIds binds and validates array parameter FeatureIds from query.
//
// Arrays are parsed according to CollectionFormat: "multi" (defaults to "csv" when empty).
func (o *V2GetBundleParams) bindFeatureIds(rawData []string, hasKey bool, formats strfmt.Registry) error {
	// CollectionFormat: multi
	featureIdsIC := rawData
	if len(featureIdsIC) == 0 {
		return nil
	}

	var featureIdsIR []string
	for i, featureIdsIV := range featureIdsIC {
		featureIdsI := featureIdsIV

		if err := validate.EnumCase(fmt.Sprintf("%s.%v", "feature_ids", i), "query", featureIdsI, []interface{}{"SNO"}, true); err != nil {
			return err
		}

		featureIdsIR = append(featureIdsIR, featureIdsI)
	}

	o.FeatureIds = featureIdsIR

	return nil
}

// bindID binds and validates parameter ID from path.
func (o *V2GetBundleParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.ID = raw

	return nil
}
